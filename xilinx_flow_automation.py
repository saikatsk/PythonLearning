import os

def create_tcl():
	write_f = open("build_fpga.tcl", mode='w')

	write_f.write("#------------------------------------------------------------------------" + os.linesep)
	write_f.write("# reportCriticalPaths" + os.linesep)
	write_f.write("#------------------------------------------------------------------------" + os.linesep)
	write_f.write("# This function generates a CSV file that provides a summary of the first" + os.linesep)
	write_f.write("# 50 violations for both Setup and Hold analysis. So a maximum number of" + os.linesep)
	write_f.write("# 100 paths are reported." + os.linesep)
	write_f.write("#------------------------------------------------------------------------" + os.linesep)
	write_f.write("proc reportCriticalPaths { fileName } {" + os.linesep)
	write_f.write("# Open the specified output file in write mode" + os.linesep)
	write_f.write("set FH [open $fileName w]" + os.linesep)
	write_f.write("# Write the current date and CSV format to a file header" + os.linesep)
	write_f.write("puts $FH \"#\n# File created on [clock format [clock seconds]]\n#\n\"" + os.linesep)
	write_f.write("puts $FH \"Startpoint,Endpoint,DelayType,Slack,#Levels,#LUTs\"" + os.linesep)
	write_f.write("# Iterate through both Min and Max delay types" + os.linesep)
	write_f.write("foreach delayType {max min} {" + os.linesep)
	write_f.write("# Collect details from the 50 worst timing paths for the current analysis" + os.linesep)
	write_f.write("# (max = setup/recovery, min = hold/removal)" + os.linesep)
	write_f.write("# The $path variable contains a Timing Path object." + os.linesep)
	write_f.write("foreach path [get_timing_paths -delay_type $delayType -max_paths 50 -nworst 1] {" + os.linesep)
	write_f.write("# Get the LUT cells of the timing paths" + os.linesep)
	write_f.write("set luts [get_cells -filter {REF_NAME =~ LUT*} -of_object $path]" + os.linesep)
	write_f.write("# Get the startpoint of the Timing Path object" + os.linesep)
	write_f.write("set startpoint [get_property STARTPOINT_PIN $path]" + os.linesep)
	write_f.write("# Get the endpoint of the Timing Path object" + os.linesep)
	write_f.write("set endpoint [get_property ENDPOINT_PIN $path]" + os.linesep)
	write_f.write("# Get the slack on the Timing Path object" + os.linesep)
	write_f.write("set slack [get_property SLACK $path]" + os.linesep)
	write_f.write("# Get the number of logic levels between startpoint and endpoint" + os.linesep)
	write_f.write("set levels [get_property LOGIC_LEVELS $path]" + os.linesep)
	write_f.write("# Save the collected path details to the CSV file" + os.linesep)
	write_f.write("puts $FH \"$startpoint,$endpoint,$delayType,$slack,$levels,[llength $luts]\"" + os.linesep)
	write_f.write("}" + os.linesep)
	write_f.write("}" + os.linesep)
	write_f.write("# Close the output file" + os.linesep)
	write_f.write("close $FH" + os.linesep)
	write_f.write("puts \"CSV file $fileName has been created.\n\"" + os.linesep)
	write_f.write("return 0" + os.linesep)
	write_f.write("}; # End PROC" + os.linesep)
	write_f.write("" + os.linesep)
	write_f.write("# STEP#1: define the output directory area." + os.linesep)
	write_f.write("#" + os.linesep)
	write_f.write("set outputDir output_files" + os.linesep)
	write_f.write("file mkdir $outputDir" + os.linesep)
	write_f.write("#" + os.linesep)
	write_f.write("# STEP#2: setup design sources and constraints" + os.linesep)
	write_f.write("#" + os.linesep)
	write_f.write("read_verilog bcd_7.v" + os.linesep)
	write_f.write("read_xdc bcd_7.xdc" + os.linesep)
	write_f.write("" + os.linesep)
	write_f.write("# STEP#3: run synthesis, write design checkpoint, report timing," + os.linesep)
	write_f.write("# and utilization estimates" + os.linesep)
	write_f.write("#" + os.linesep)
	write_f.write("synth_design -top bcd_7 -part xc7a15tcpg236-1" + os.linesep)
	write_f.write("write_checkpoint -force $outputDir/post_synth.dcp" + os.linesep)
	write_f.write("report_timing_summary -file $outputDir/post_synth_timing_summary.rpt" + os.linesep)
	write_f.write("report_utilization -file $outputDir/post_synth_util.rpt" + os.linesep)
	write_f.write("#" + os.linesep)
	write_f.write("# Run custom script to report critical timing paths" + os.linesep)
	write_f.write("reportCriticalPaths $outputDir/post_synth_critpath_report.csv" + os.linesep)
	write_f.write("#" + os.linesep)
	write_f.write("# STEP#4: run logic optimization, placement and physical logic optimization," + os.linesep)
	write_f.write("# write design checkpoint, report utilization and timing estimates" + os.linesep)
	write_f.write("#" + os.linesep)
	write_f.write("opt_design -debug_log -verbose" + os.linesep)
	write_f.write("reportCriticalPaths $outputDir/post_opt_critpath_report.csv" + os.linesep)
	write_f.write("place_design -timing_summary -verbose" + os.linesep)
	write_f.write("report_clock_utilization -file $outputDir/clock_util.rpt" + os.linesep)
	write_f.write("#" + os.linesep)
	write_f.write("# Optionally run optimization if there are timing violations after placement" + os.linesep)
	write_f.write("if {[get_property SLACK [get_timing_paths -max_paths 1 -nworst 1 -setup]] < 0} {" + os.linesep)
	write_f.write(" puts \"Found setup timing violations => running physical optimization\"" + os.linesep)
	write_f.write(" phys_opt_design" + os.linesep)
	write_f.write("}" + os.linesep)
	write_f.write("write_checkpoint -force $outputDir/post_place.dcp" + os.linesep)
	write_f.write("report_utilization -file $outputDir/post_place_util.rpt" + os.linesep)
	write_f.write("report_timing_summary -file $outputDir/post_place_timing_summary.rpt" + os.linesep)
	write_f.write("" + os.linesep)
	write_f.write("# STEP#5: run the router, write the post-route design checkpoint, report the routing" + os.linesep)
	write_f.write("# status, report timing, power, and DRC, and finally save the Verilog netlist." + os.linesep)
	write_f.write("#" + os.linesep)
	write_f.write("route_design -verbose" + os.linesep)
	write_f.write("write_checkpoint -force $outputDir/post_route.dcp" + os.linesep)
	write_f.write("report_route_status -file $outputDir/post_route_status.rpt" + os.linesep)
	write_f.write("report_timing_summary -file $outputDir/post_route_timing_summary.rpt" + os.linesep)
	write_f.write("report_power -file $outputDir/post_route_power.rpt" + os.linesep)
	write_f.write("report_drc -file $outputDir/post_imp_drc.rpt" + os.linesep)
	write_f.write("write_verilog -force $outputDir/cpu_impl_netlist.v -mode timesim -sdf_anno true" + os.linesep)
	write_f.write("#" + os.linesep)
	write_f.write("# STEP#6: generate a bitstream" + os.linesep)
	write_f.write("#" + os.linesep)
	write_f.write("set_property BITSTREAM.GENERAL.COMPRESS TRUE [current_design]" + os.linesep)
	write_f.write("write_bitstream -force $outputDir/bcd_7.bit -verbose" + os.linesep)
	write_f.write("" + os.linesep)
	write_f.write("save_project_as bcd_7 bcd_7_prj_dir -force -verbose" + os.linesep)
	write_f.write("" + os.linesep)
	write_f.write("#vivado -mode batch -source build_fpga.tcl" + os.linesep)
	write_f.write("\n\n" + os.linesep)

	write_f.write("project_close" + os.linesep)
	write_f.close()

create_tcl()
